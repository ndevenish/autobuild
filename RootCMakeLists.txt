cmake_minimum_required(VERSION 3.8 FATAL_ERROR)
# 3.5 definite minimum

option(BUILD_PYTHON_LIBS "Build the python shared libraries" ON)
option(BUILD_SHARED_LIBS "Build libraries as shared libraries" ON)

if (${BUILD_PYTHON_LIBS})
  find_package(PythonInterp REQUIRED)
  find_package(PythonLibs REQUIRED)
  
  add_library(Python::Libs SHARED IMPORTED)
  set_target_properties(Python::Libs PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES ${PYTHON_INCLUDE_DIRS}
    IMPORTED_LOCATION             ${PYTHON_LIBRARIES} )

  find_package(Boost REQUIRED COMPONENTS python)
  include_directories(${PYTHON_INCLUDE_DIRS})
else()
  find_package(Boost REQUIRED)
endif()

find_package(TIFF REQUIRED)
find_package(OpenGL)

# Add HDF5
find_package(HDF5 REQUIRED COMPONENTS CXX)
# Hardcode link to annlib
add_library(HDF5::CXX SHARED IMPORTED)
set_target_properties(HDF5::CXX PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES ${HDF5_CXX_INCLUDE_DIRS}
  INTERFACE_COMPILE_DEFINITIONS ${HDF5_CXX_DEFINITIONS}
  IMPORTED_LOCATION             ${HDF5_CXX_LIBRARIES} )


# Convenience macro for setting up python shared libraries
# Usage: add_python_library( <name> SOURCES <file> [<file>]... )
macro(add_python_library name)
  cmake_parse_arguments(ADDPYLIB "" "" SOURCES ${ARGN})
  if (BUILD_PYTHON_LIBS)
    add_library(${name} SHARED ${ADDPYLIB_SOURCES})
    # If the project name is also a target, then add it
    if (TARGET ${PROJECT_NAME})
      target_link_libraries(${name} ${PROJECT_NAME} Boost::python Python::Libs )
    else()
      target_link_libraries(${name} Boost::python Python::Libs )
    endif()
    set_target_properties(${name} PROPERTIES PREFIX "")
  endif()
endmacro()


include(autogen_CMakeLists.txt)
