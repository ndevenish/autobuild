cmake_minimum_required(VERSION 3.7 FATAL_ERROR)
# 3.5 definite minimum


# Add the included modules
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
include(LibTBXRefresher)

option(BUILD_PYTHON_LIBS "Build the python shared libraries" ON)
option(BUILD_SHARED_LIBS "Build libraries as shared libraries" ON)

if (${BUILD_PYTHON_LIBS})
  # Add python interpreter as an imported executable
  find_package(PythonInterp REQUIRED)  
  add_executable(Python::Python IMPORTED)
  set_target_properties(Python::Python PROPERTIES
    IMPORTED_LOCATION ${PYTHON_EXECUTABLE})

  # Add python libraries as an imported library
  find_package(PythonLibs REQUIRED)
  add_library(Python::Libs SHARED IMPORTED)
  set_target_properties(Python::Libs PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES ${PYTHON_INCLUDE_DIRS}
    IMPORTED_LOCATION             ${PYTHON_LIBRARIES} )

  # Find boost python libraries
  find_package(Boost REQUIRED COMPONENTS python)
  include_directories(${PYTHON_INCLUDE_DIRS})
else()
  find_package(Boost REQUIRED)
endif()
message("Found Boost headers at: ${Boost_INCLUDE_DIRS}")

find_package(TIFF REQUIRED)
find_package(OpenGL)
find_package(Eigen3 REQUIRED)

# Add HDF5
find_package(HDF5 REQUIRED COMPONENTS C CXX)
add_library(HDF5::HDF5 SHARED IMPORTED)
set_target_properties(HDF5::HDF5 PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${HDF5_INCLUDE_DIRS}"
  INTERFACE_COMPILE_DEFINITIONS "${HDF5_DEFINITIONS}"
  IMPORTED_LOCATION             "${HDF5_LIBRARIES}" )
add_library(HDF5::CXX SHARED IMPORTED)
set_target_properties(HDF5::CXX PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${HDF5_CXX_INCLUDE_DIRS}"
  INTERFACE_COMPILE_DEFINITIONS "${HDF5_CXX_DEFINITIONS}"
  IMPORTED_LOCATION             "${HDF5_CXX_LIBRARIES}" )
add_dependencies(HDF5::CXX HDF5::HDF5)
add_library(HDF5::C SHARED IMPORTED)
set_target_properties(HDF5::C PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${HDF5_C_INCLUDE_DIRS};${HDF5_INCLUDE_DIRS}"
  INTERFACE_COMPILE_DEFINITIONS "${HDF5_C_DEFINITIONS}"
  IMPORTED_LOCATION             "${HDF5_C_LIBRARIES}" )
add_dependencies(HDF5::C HDF5::HDF5)
message("Found HDF5 at: ${HDF5_INCLUDE_DIRS}")

# Convenience macro for setting up python shared libraries
# Usage: add_python_library( <name> SOURCES <file> [<file>]... )
macro(add_python_library name)
  cmake_parse_arguments(ADDPYLIB "" "" SOURCES ${ARGN})
  if (BUILD_PYTHON_LIBS)
    add_library(${name} SHARED ${ADDPYLIB_SOURCES})
    # Add to a project meta-target
    if(NOT TARGET ${PROJECT_NAME}_meta)
      add_custom_target(${PROJECT_NAME}_meta)
    endif()
    # If the project name is also a target, then add it
    if (TARGET ${PROJECT_NAME})
      target_link_libraries(${name} ${PROJECT_NAME} Boost::python Python::Libs )
      add_dependencies(${PROJECT_NAME}_meta ${name})
    else()
      target_link_libraries(${name} Boost::python Python::Libs )
    endif()
    set_target_properties(${name} PROPERTIES PREFIX "")
  endif()
endmacro()

# Include the three standard 'everything' directories - module, cctbx_project and build include
include_directories(${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/cctbx_project ${CMAKE_BINARY_DIR}/include)

set(LIBRARY_OUTPUT_DIRECTORY "lib")

# Write the Boost adaptbx size_t file - this is specially generated
include(BoostAdapTBXSizing)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

include(autogen_CMakeLists.txt)

